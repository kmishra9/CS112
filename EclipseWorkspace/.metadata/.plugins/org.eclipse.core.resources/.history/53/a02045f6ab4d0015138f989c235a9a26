package main;


/*
 * Approach: The work begins with processing the arguments passed in. A valid stepCount (how many time iterations 
 * or columns will be shown) and a valid rule integer. This rule integer is passed into the Rule class and converted
 * into a binary bit array, where the leftmost is the 2^0 bit and the rightmost is 2^7. A 1 is present if the bit is 
 * turned on in the rule integer, and a 0 if it is not. With the rule constructed, the main then cals the producePBM
 * function and stepcount number of rows are printed out in PBM format, changing according to the rule. Within this
 * function, the output function of the rule is called and the array is accessed to figure out whether a 1 or 0 should
 * be returned. There are 8 possible situations (0-7) that a, b, and c can represent and the rule defines whether they're 
 * 1 or 0 if the bit was turned on in its conversion to binary. 
 * 
 * Examples: if the rule was 0, every possible input of a, b, and c would return 0. For 255 (all 8 bits turned on), every 
 * situation would return 1. 
 * 
 * http://www-inst.eecs.berkeley.edu/~selfpace/cs9gonline/P1.new/
 */


public class Life1D {
	private Rule rule;
	private int stepCount;
	
	public static void main (String [ ] args) {
		Life1D simulation = new Life1D ( );
		simulation.processArgs (args);
		simulation.producePBM ( );
	}
	
	
	public void producePBM ( ) {
		
		//Making a new array of size and filling it with stepcount "empty pixels" on either side of the activated one
		int[] pixels = new int[stepCount*2 + 1];
		pixels[stepCount] = 1;
		
		//Begin drawing the array, with each loop being a timestep and go the number of steps specified 
		int currentTime = 0;
		while (currentTime <= stepCount) {
			
			//Print the state of the current array
			for (int num : pixels) {
				System.out.print(num);
			}
			System.out.println("");
			
			//Make a copy to fill in the next time step
			int[] pixelsCpy = new int[pixels.length];
			
			//Run through the array and configure it for its next output
			for (int index = 0; index < pixels.length; index += 1) {
				//Preventing out of bounds errors
				int a = 0, c = 0, b = pixels[index];
				if (index-1 >= 0)						a = pixels[index - 1];
				if (index+1 < pixels.length)			c = pixels[index + 1];
				
				//Run the rule to determine what the next timestep should display
				pixelsCpy[index] = this.rule.output(a, b, c);
			}
			
			//Move the pointer to the new time step version
			pixels = pixelsCpy;
			
			//Advance the time step
			currentTime += 1;
		}	
	}
	
	// Retrieve the command-line arguments, and convert them to values for the rule number 
	// and the timestep count.
	private void processArgs (String [ ] args) {
		/*Checks that enough arguments are given to allow a step and rulecount*/
		if (args.length != 2) {
			System.err.println ("Usage:  java Life1D rule# rowcount");
			System.exit (1);
		}
		
		/*Checks that a valid rule was supplied*/
		try {
			rule = new Rule (Integer.parseInt (args[0]));
		} catch (Exception ex) {
			System.err.println ("The first argument must specify a rule number.");
			System.exit (1);
		}
		
		/*Checks that a valid step count was given*/
		try {
			stepCount = Integer.parseInt (args[1]);
		} catch (Exception ex) {
			System.err.println ("The second argument must specify the number of lines in the output.");
			System.exit (1);
		}
		if (stepCount < 1) {
			System.err.println ("The number of output lines must be a positive number.");
			System.exit (1);
		}
	}
}
class Rule {
	// Whatever instance variables you need should be declared here.
	int[] ruleMap = new int[8];
	
	public Rule (int ruleNum) {
		//Go through each bit and check if its on or not (either a zero or one)
		int power = 1, index = 0;
		while (index < 8) {
			
			//Checks if the bit is on or not and associates that bit with 0 or 1
			ruleMap[index] = (ruleNum & power)/power;
			
			power *= 2;		//Advance the power to the next power of two
			index += 1;		//Advances the index of the bit
		}
	}
	
	// Return the output that this rule prescribes for the given input.
	// a, b, and c are each either 1 or 0; 4*a+2*b+c is the input for the rule.
	public int output (int a, int b, int c) {
		//Generate the 3 bit number or "situation" 
		int threeBit = c + b*2 + a*2*2;
		
		//Check it against the ruleMap that maps each possible 3 bit (0 through 7) situation to either a 1 or 0
		return ruleMap[threeBit];
	}
}
